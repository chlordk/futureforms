- hosts: localhost

  vars:
    - install_path: ../../build

  tasks:
    - name: Install packages
      ansible.builtin.package:
        name: "{{ item }}"
      become: true
      become_method: sudo
      tags:
        - install_package
      loop:
        - sysstat
        - git
        - ansible
        - python3-psycopg2
        - npm
        - node-typescript
        - openjdk-19-jre
        - maven
        - postgresql

    - name: Create dir "{{ install_path }}/core"
      ansible.builtin.file:
        path: "{{ install_path }}/core"
        state: directory
      tags:
        - create-dir-install_path_core

    - name: Check core is build
      stat:
        path: "{{ install_path }}/core/package.json"
      register: build_core_package_json
      tags: build_core_package_json

    - name: Futureforms core npm install
      ansible.builtin.command: npm install
      args:
        chdir: "../../src/core"
      when: build_core_package_json.stat.exists == false
      tags:
        - npm_install_core

    - name: Build Futureforms core app
      ansible.builtin.command: npm run build
      args:
        chdir: "../../src/core"
      when: build_core_package_json.stat.exists == false
      tags:
        - npm_build_core

    - name: Install Futureforms demo app packages based on package.json using the npm
      community.general.npm:
        path: "../../src/demo"
        state: present
      tags:
        - npm_install_demo

    - name: Create the postgres database user hr
      community.postgresql.postgresql_user:
        name: hr
        password: hr
        state: present
      become: true
      become_method: sudo
      become_user: postgres
      tags:
        - create-hr-user

    - name: Create the postgres database hr
      community.postgresql.postgresql_db:
        name: hr
        owner: hr
        state: present
      become: true
      become_method: sudo
      become_user: postgres
      tags:
        - create-hr-db

    - name: Install the postgres hr schema objects
      ansible.builtin.command: psql -h 127.0.0.1 -U hr -d hr -f "../../src/demo/data/datademo.sql"
      environment:
        PGPASSWORD: hr
      tags:
        - install-hr-schema-objects

    - name: Create dir demo
      ansible.builtin.file:
        path: "{{ install_path }}/demo/data"
        state: directory
      tags:
        - create-demo-openrestdb

    - name: Copy initial data.sql
      ansible.builtin.copy:
        src: ../../src/demo/data/datademo.sql
        dest: "{{ install_path }}/demo/data/"
      tags:
        - copy-data-sql

    - name: Check database.js template exists
      stat:
        path: "{{ install_path }}/demo/bin"
      register: build_demo_openrestdb_bin
      tags: build_demo_openrestdb_bin

    - name: Copy openrestdb template
      ansible.builtin.copy:
        src: "../../src/openrestdb/template/"
        dest: "{{ install_path }}/demo"
        mode: preserve
      when: build_demo_openrestdb_bin.stat.exists == false
      tags: copy_openrestdb_template

    - name: Check openrestdb.jar exists
      stat:
        path: "../../src/openrestdb/target"
      register: src_openrestdb_target
      tags: src_openrestdb_target

    - name: Build openrestdb.jar
      ansible.builtin.command: mvn package
      args:
        chdir: "../../src/openrestdb"
      when: src_openrestdb_target.stat.exists == false
      tags:
        - mvn_package

    - name: Check openrestdb.jar exists
      stat:
        path: "{{ install_path }}/demo/lib/openrestdb-2.1.jar"
      register: check_demo_openrestdb_jar
      tags: check_demo_openrestdb_jar

    - name: Copy openrestdb.jar
      ansible.builtin.copy:
        src: "../../src/openrestdb/target/openrestdb-2.1.jar"
        dest: "{{ install_path }}/demo/lib"
        mode: preserve
      when: check_demo_openrestdb_jar.stat.exists == false
      tags: copy_openrestdb_jar

    - name: Check demo.js exists
      stat:
        path: "{{ install_path }}/demo/app/demo.js"
      register: build_demo_js
      tags: build_demo_js

    - name: Build Futureforms demo app
      ansible.builtin.command: npm run build
      args:
        chdir: "../../src/demo"
      when: build_demo_js.stat.exists == false
      tags:
        - npm_build_demo

    - name: Pack demo archive for deploy
      community.general.archive:
        path:
          - "{{ install_path }}/demo"
        dest: "{{ install_path }}/demo.tar.gz"
        format: gz
      tags:
        - pack_archive
